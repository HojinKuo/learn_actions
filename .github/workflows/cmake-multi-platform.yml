name: CMake on multiple platforms

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
  push:
    branches     : [ main ]
    paths-ignore : [ '**.md', '**.txt' ]
    tags:
      - 'v*'
  pull_request:
    branches     : [ main ]
    paths-ignore : [ '**.md', '**.txt' ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        project_name: [MyProject]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4
    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        mkdir -pv ${{ github.workspace }}/release
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Run the program
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      if: matrix.os == 'windows-latest'
      run: |
        ls
        .\Release\${{ matrix.project_name }}.exe
        XCOPY .\Release\${{ matrix.project_name }}.exe ${{ github.workspace }}\release\
        mv ${{ github.workspace }}\release\${{ matrix.project_name }}.exe ${{ github.workspace }}\release\main_${{ matrix.os }}_${{ matrix.c_compiler }}_${{ matrix.build_type }}
        ls ${{ github.workspace }}\release\
    - name: Run the program
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      if: matrix.os == 'ubuntu-latest'
      run: |
        ls 
        ./${{ matrix.project_name }}
        cp ./${{ matrix.project_name }} ${{ github.workspace }}/release/main_${{ matrix.os }}_${{ matrix.c_compiler }}_${{ matrix.build_type }}
        ls ${{ github.workspace }}/release/

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: main_${{ matrix.os }}_${{ matrix.c_compiler }}_${{ matrix.build_type }}
        path: ${{ github.workspace }}/release/main_${{ matrix.os }}_${{ matrix.c_compiler }}_${{ matrix.build_type }}

  
  Release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        path: ${{ github.workspace }}/release

    - name: Display structure of downloaded files
      run: ls -R ${{ github.workspace }}/release
    
    - name: Release
      uses: softprops/action-gh-release@v2  
      if: github.ref_type == 'tag'
      with:
        body: "The  release of the project."
        files: |
          ${{ github.workspace }}/release/*



